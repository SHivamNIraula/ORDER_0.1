name: Django Restaurant Order Management CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Create a minimal requirements.txt if it doesn't exist or is empty
        if [ ! -s requirements.txt ]; then
          echo "Creating minimal requirements.txt..."
          cat > requirements.txt << EOF
        Django==4.2.7
        channels==4.0.0
        channels-redis==4.2.0
        daphne
        django-crispy-forms
        crispy-bootstrap5
        Pillow
        EOF
        fi
        
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=django-test-secret-key-for-ci-$(date +%s)" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV

    - name: Check Django setup
      run: |
        python -c "import django; print(f'Django version: {django.get_version()}')"
        python manage.py check --settings=order_mng.settings_ci

    - name: Run Django checks
      run: |
        python -c "import django; print(f'Django version: {django.get_version()}')"
        python manage.py check --settings=order_mng.ci_settings

    - name: Run migrations
      run: |
        python manage.py migrate --settings=order_mng.ci_settings

    - name: Create superuser
      run: |
        echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@test.com', 'admin123') if not User.objects.filter(username='admin').exists() else None" | python manage.py shell --settings=order_mng.ci_settings

    - name: Run tests
      run: |
        python manage.py test --settings=order_mng.ci_settings

    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput

  basic-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install basic dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black

    - name: Run basic linting
      run: |
        # Check for Python syntax errors and undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        
        # Check code formatting (but don't fail the build)
        black --check --diff . || echo "Code formatting issues found (not failing build)"

  deploy:
    needs: [test, basic-checks]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploy job completed successfully!"
        echo "âœ… All tests passed"
        echo "âœ… Ready for production deployment"
        echo "This is where you'd deploy to your server (Heroku, AWS, etc.)"
