name: ORDER_0..1 CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: restaurant_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up environment variables
        run: |
          echo "SECRET_KEY=django-test-secret-key-for-ci" >> $GITHUB_ENV
          echo "DEBUG=True" >> $GITHUB_ENV
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/restaurant_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV

      - name: Run migrations
        run: |
          python manage.py migrate

      - name: Create superuser
        run: |
          python manage.py shell -c "
          from django.contrib.auth.models import User;
          User.objects.create_superuser('admin', 'admin@test.com', 'admin123') if not User.objects.filter(username='admin').exists() else None
          "

      - name: Run tests
        run: |
          python manage.py test

      - name: Run linting (flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting (black)
        run: |
          black --check .

      - name: Check import sorting (isort)
        run: |
          isort --check-only .

      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production server..."
          echo "This is where you'd deploy to your server"
          # Add your deployment commands here
          # Examples:
          # - Deploy to Heroku
          # - Deploy to AWS
          # - Deploy to DigitalOcean
          # - Deploy to your VPS

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security check
        run: |
          pip install safety bandit
          safety check
          bandit -r . -x ./venv/,./env/
